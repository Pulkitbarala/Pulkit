Coursera - C++ Object Basics: Functions, Recursion, and Objects
---------------------------------------------------------------------
week 1
---------------------------------------------------------------
======>Q1)--------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;
double GetAvg(double a, double b){
  double result = (a + b) / 2;
  return result;
}

int main(int argc, char** argv) {
  try {
    double x = stod(argv[1]);
    double y = stod(argv[2]);
    cout << GetAvg(x, y) << endl;
  }
  catch (invalid_argument& e) {
    cout << "One or more invalid arguments." << endl;
  }
  return 0;
}

======>Q2)--------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

void GetOddsEvens(string flag, vector<int> numbers) {
  if (flag == "true") {
    for (int number : numbers) {
      if (number % 2 == 0) {
        cout << number << endl;
      }
    }
  } else if (flag == "false") {
    for (int number : numbers) {
      if (number % 2 != 0) {
        cout << number << endl;
      }
    }
  } else {
    cout << "Command was successfully executed." << endl;
  }
}

int main(int argc, char** argv) {
  string x = argv[1];
  vector<int> y;
  for (int i = 2; i < argc; i++) {
    y.push_back(stoi(argv[i]));
  }
  GetOddsEvens(x, y);
}

======>Q3)--------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;
bool FindTerm(string x, vector<string>& y) {
  bool b = false;
  for (auto a : y) {
    if (a == x) {
      b = true;
    }
  }
  return b;
}
int main(int argc, char** argv) {
  string x = argv[1];
  vector<string> y;
  for (int i = 2; i < argc; i++) {
    y.push_back(argv[i]);
  }
  cout << boolalpha << FindTerm(x, y) << endl;
}

======>Q4)--------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;
bool IsPalindrome(const string& str) {
  int len = str.length();
  for (int i = 0; i < len/2; ++i) {
    if (str[i] != str[len-i-1]) {
      return false;
    }
  }
  return true;
}
int main(int argc, char** argv) {
  string x = argv[1];
  cout << boolalpha << IsPalindrome(x) << endl;
}

======>Q5)--------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

string Reverse(string x) {
  string y;
  for (int i = x.length() - 1; i >= 0; i--) {
    y += x.at(i);
  }
  return y;
}

//add code below this line

bool IsPalindrome(const string& str) {
  return str == Reverse(str);
}

//add code above this line

int main(int argc, char** argv) {
  string x = argv[1];
  cout << boolalpha << IsPalindrome(x) << endl;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEEK 2
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q1)--------------------------------------------------------------------------------------
