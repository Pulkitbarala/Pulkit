Coursera - C++ Basic Structures: Vectors, Strings, and Files
-------------------------------------------------------------------
WEEK 1
-------------------------------------------------------------------
Q1)
#include <iostream>
using namespace std;

int main() {
  
  string oceans[] = {"Pacific", "Atlantic", "Indian", "Arctic", "Southern"};
  
  //add code below this line

for (int i = 0; i < 5; i++) {
    cout << oceans[i] << endl;
  }

  //add code above this line
  
  return 0;
  
}
---------------------------------------------------------------------
Q2)
#include <iostream>
#include <vector>
using namespace std;

int main() {
  
  vector<string> oceans(0);
  
  //add code below this line
oceans.push_back("Pacific");
oceans.push_back("Atlantic");
oceans.push_back("Indian");
oceans.push_back("Arctic");
oceans.push_back("Southern");
oceans.push_back("Place Holder");
oceans.at(5) = "Delete";
oceans.pop_back();


  //add code above this line
  
  for (auto a : oceans) {
    cout << a << endl;
  }
  
  return 0;
  
}
------------------------------------------------------------------
Q3)
#include <iostream>
#include <vector>
using namespace std;

int main(int argc, char** argv) {
  
  vector<string> reverse(0);
  reverse.push_back(argv[1]);
  reverse.push_back(argv[2]);
  reverse.push_back(argv[3]);
  
  //add code below this line
reverse.push_back(argv[3]);
reverse.push_back(argv[2]);
reverse.push_back(argv[1]);
reverse.erase(reverse.begin());
reverse.erase(reverse.begin());
reverse.erase(reverse.begin());


  //add code above this line
  
  for (auto a : reverse) {
    cout << a << endl;
  }
  
  return 0;
  
}
------------------------------------------------------
Q4)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  int a = atoi((argv[1]));
  int b = atoi((argv[2]));
  int c = atoi((argv[3]));
  int d = atoi((argv[4]));
  int nums[3][3];
  
  //add code below this line
nums[0][0] = a;
nums[0][1] = b;
nums[0][2] = a + b;
nums[1][0] = c;
nums[1][1] = d;
nums[1][2] = c + d;
nums[2][0] = a + c;
nums[2][1] = b + d;
nums[2][2] = ((a+b) + (c+d) + (a+c) + (b+d)); //or 2(a+b+c+d)


  //add code above this line
  
  int row = sizeof(nums) / sizeof(nums[0]);
  int col = sizeof(nums[0]) / sizeof(int);
  
  for (int i = 0; i < row; i++) {
    for (int j = 0; j < col; j++) {
      if (j == 2) {
        cout << nums[i][j] << endl;
      }
      else {
        cout << nums[i][j] << " ";
      }
    }
  }
  
  return 0;
  
}
----------------------------------------------------------------------
Q5)
#include <iostream>
#include <vector>
using namespace std;

int main(int argc, char** argv) {
  
  double input;
  double total = 0;
  double avg = 0;
  vector<double> numList(0);
  
  cout << "Enter double or int to add to total, else find total average:" << endl;
  while (cin >> input) {
  
    // add input into vector
    
    
    numList.push_back(input);


for (auto a : numList) {
  total += a;
  avg = total / numList.size();
}

for (int i = 0; i < numList.size(); i++) {
  total += numList.at(i);
  avg = total / numList.size();
}
    // your code goes above
  
    cout << "Enter double or int to add to total, else find total average:" << endl;
  }
  
  // iterate through vector, add elements to total, then calculate average
  
  
  
  // your code goes above
  
  cout << avg << endl;
  
  return 0;
  
}
----------------------------------------------------------------------------------------------
WEEK 2
----------------------------------------------------------------------------------------------
Q1)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  int a = atoi((argv[1]));
  int b = atoi((argv[2]));
  int *p1 = &a;
  int *p2 = &b;
  
  //add code below this line
  if (*p1 > *p2) {
  cout << "The larger number is " << *p1 << endl;
}
  
else if (*p1 < *p2) {
  cout << "The larger number is " << *p2 << endl;
}
  
else {
  cout << "Neither number is larger" << endl;
}
  
  
  //add code above this line
  
  return 0;
  
}
--------------------------------------------------------
Q2)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  double a;
  double b;
  double *p1;
  double *p2;
  
  cout << "Enter the first number: " << endl;
  cin >> a;
  if (!cin.good()) {
    cout << "invalid" << endl;
    exit(0);
  }
  cout << "Enter the second number: " << endl;
  cin >> b;
  if (!cin.good()) {
    cout << "invalid" << endl;
    exit(0);
  }
  
  // your code goes below
  p1 = &a;
p2 = &b;
  cout << "The sum is ";
  
  
  // your code goes above
  
  cout << *p1 + *p2 << endl;
  
  return 0;
  
}
--------------------------------------------------------------
WEEK 3
--------------------------------------------------------------
Q1)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  string my_string = (argv[1]);
  if (!my_string.empty()) {
    char first_char = my_string[0];
    char last_char = my_string[my_string.length() - 1];

    cout << first_char << " is the first character and " << last_char << " is the last character" << endl;
  }
  return 0;
  
}
-----------------------------------------------------------------
Q2)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  string my_string = (argv[1]);
  
  //add code below this line

 if (!my_string.empty()) {
    int stringLength = my_string.length();

    // Print the input string as many times as its length
    for (int i = 0; i < stringLength; i++) {
      for (int j = 0; j < stringLength; j++) {
        cout << my_string;
      }
      cout << endl;
    }
  }

  //add code above this line
  
  return 0;
  
}
------------------------------------------------------------------------------------------
Q3)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  string original = (argv[1]);
  string modified;
  char ch;
  
  //add code below this line

if (!original.empty()) {
    int stringLength = original.length();

    // Process each character in the original string
    for (int i = 0; i < stringLength; i++) {
      ch = original[i];
      
      // Check if the character is uppercase
      if (isupper(ch)) {
        modified += 'u';
      }
      // Check if the character is lowercase
      else if (islower(ch)) {
        modified += 'l';
      }
      // If neither uppercase nor lowercase, use '-'
      else {
        modified += '-';
      }
    }

    // Print the original and modified strings
    cout << original << endl;
    cout << modified << endl;
  }

  //add code above this line
  
  return 0;
  
}
------------------------------------------------------
Q4)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  string my_string = (argv[1]);
  
  //add code below this line
if (!my_string.empty()) {
    int stringLength = my_string.length();

    // Calculate the position to split the string into two parts
    int splitPosition = stringLength / 2;

    // Print the first half on one line
    for (int i = 0; i < splitPosition; i++) {
      cout << my_string[i];
    }
    cout << endl;

    // Print the second half (including the extra character for odd-length strings) on another line
    for (int i = splitPosition; i < stringLength; i++) {
      cout << my_string[i];
    }
    cout << endl;
  }


  //add code above this line
  
  return 0;
  
}
----------------------------------------------------------------
Q5)
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
  
  string my_string = (argv[1]);
  
  //add code below this line
if (!my_string.empty() && my_string.length() % 2 == 0) {
    int stringLength = my_string.length();

    // Swap adjacent characters in the string
    for (int i = 0; i < stringLength; i += 2) {
      char temp = my_string[i];
      my_string[i] = my_string[i + 1];
      my_string[i + 1] = temp;
    }

    // Print the modified string
    cout << my_string << endl;
  } else {
    // Handle the case of an odd-length input
    cout << "Error: Input must have an even number of characters." << endl;
  }


  //add code above this line
  
  return 0;
  
}
----------------------------------------------------------------------
WEEK 4
-----------------------------------------------------------------
Q1)
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
using namespace std;

int main(int argc, char** argv) {
if (argc != 2) {
    cerr << "Usage: " << argv[0] << " <filename>" << endl;
    return 1;
  }

  string path = argv[1];
  ifstream file(path);

  if (!file.is_open()) {
    cerr << "Error: Cannot open the file." << endl;
    return 1;
  }

  int lineCount = 0;
  int charCount = 0;
  string line;

  while (getline(file, line)) {
    lineCount++;
    charCount += line.length();
  }

  file.close();

  cout << lineCount << " line(s)" << endl;
  cout << charCount << " character(s)" << endl;

  return 0;
  
}
-----------------------------------------------------------
Q2)
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
using namespace std;

int main(int argc, char** argv) {
if (argc != 2) {
        cerr << "Usage: " << argv[0] << " <filename>" << endl;
        return 1;
    }

    string path = argv[1];
    ifstream file(path);

    if (!file.is_open()) {
        cerr << "Error: Cannot open the file." << endl;
        return 1;
    }

    vector<int> columnSums(4, 0);
    int rowCount = 0;

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string cell;
        int col = 0;
        while (getline(ss, cell, ',')) {
            int value;
            istringstream(cell) >> value;
            columnSums[col] += value;
            col++;
        }
        rowCount++;
    }

    if (rowCount == 0) {
        cerr << "Error: The file is empty." << endl;
        return 1;
    }

    cout << columnSums[0] / rowCount << " "
         << columnSums[1] / rowCount << " "
         << columnSums[2] / rowCount << " "
         << columnSums[3] / rowCount << endl;

    file.close();

  return 0;
  
}
-----------------------------------------------------------------
Q3)
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
using namespace std;

int main(int argc, char** argv) {
  if (argc != 2) {
        cerr << "Usage: " << argv[0] << " <filename>" << endl;
        return 1;
    }

    string path = argv[1];
    ifstream file(path);

    if (!file.is_open()) {
        cerr << "Error: Cannot open the file." << endl;
        return 1;
    }

    vector<string> lines;

    string line;
    while (getline(file, line)) {
        lines.push_back(line);
    }

    file.close();

    // Print the lines in reverse order
    for (int i = lines.size() - 1; i >= 0; i--) {
        cout << lines[i] << endl;
    }
  return 0;
  
}
-----------------------------------------------------------------
Q4)
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
using namespace std;

int main(int argc, char** argv) {

if (argc != 2) {
        cerr << "Usage: " << argv[0] << " <filename>" << endl;
        return 1;
    }

    string path = argv[1];
    ifstream file(path);

    if (!file.is_open()) {
        cerr << "Error: Cannot open the file." << endl;
        return 1;
    }

    string oldestName;
    int maxAge = -1;

    string line;
    while (getline(file, line)) {
        istringstream ss(line);
        string name, ageStr, occupation;
        int age;

        ss >> name >> ageStr >> occupation;

        try {
            age = stoi(ageStr);
            if (age > maxAge) {
                maxAge = age;
                oldestName = name;
            }
        } catch (const invalid_argument& e) {
            cerr << "Error: Invalid age format in the file." << endl;
            return 1;
        }
    }

    file.close();

    if (maxAge == -1) {
        cerr << "Error: No valid age information found in the file." << endl;
        return 1;
    }

    cout << "The oldest person is " << oldestName << "." << endl;
  return 0;
  
}
-----------------------------------------------------------------------
Q5)
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <iomanip>
using namespace std;

int main(int argc, char** argv) {

 if (argc != 2) {
        cerr << "Usage: " << argv[0] << " <filename>" << endl;
        return 1;
    }

    string path = argv[1];
    ifstream file(path);

    if (!file.is_open()) {
        cerr << "Error: Cannot open the file." << endl;
        return 1;
    }

    vector<string> southernHemisphereCities;

    string line;
    bool header = true;

    while (getline(file, line)) {
        if (header) {
            header = false;
            continue;  // Skip the header line
        }

        istringstream ss(line);
        string city, country, latitudeStr, longitudeStr;
        int latitude;

        getline(ss, city, ',');
        getline(ss, country, ',');
        getline(ss, latitudeStr, ',');
        getline(ss, longitudeStr, ',');

        try {
            latitude = stoi(latitudeStr);
            if (latitude < 0) {
                southernHemisphereCities.push_back(city);
            }
        } catch (const invalid_argument& e) {
            cerr << "Error: Invalid latitude format in the file." << endl;
            return 1;
        }
    }

    file.close();

    if (southernHemisphereCities.empty()) {
        cout << "No cities found in the Southern Hemisphere." << endl;
    } else {
        cout << "The following cities are in the Southern Hemisphere: ";
        for (size_t i = 0; i < southernHemisphereCities.size(); i++) {
            cout << southernHemisphereCities[i];
            if (i < southernHemisphereCities.size() - 1) {
                cout << ", ";
            }
        }
        cout << "." << endl;
    }
  return 0;
  
}
---------------------------------------------------------------------------
